W. Setyawan, S. Curtarolo, Computational Materials Science, 2010, 49, 299â€“312.
# CUB, cP
kPoint = {'G': [0.0, 0.0, 0.0],
          'M': [0.5, 0.5, 0.0],
          'R': [0.5, 0.5, 0.5],
          'X': [0.0, 0.5, 0.0]}
# FCC, cF
kPoint = {'G': [0.000, 0.000, 0.000],
          'K': [0.375, 0.375, 0.750],
          'L': [0.500, 0.500, 0.500],
          'U': [0.625, 0.250, 0.625],
          'W': [0.500, 0.250, 0.750],
          'X': [0.500, 0.000, 0.500]}
# BCC, cI
kPoint = {'G': [0.00,  0.00, 0.00],
          'H': [0.50, -0.50, 0.00],
          'P': [0.25,  0.25, 0.25],
          'N': [0.00,  0.00, 0.50]}
# TET, tP
kPoint = {'G': [0.0, 0.0, 0.0],
          'A': [0.5, 0.5, 0.5],
          'M': [0.5, 0.5, 0.0],
          'R': [0.0, 0.5, 0.5],
          'X': [0.0, 0.5, 0.0],
          'Z': [0.0, 0.0, 0.5]}
#BCT1, tI
eta = (1. + c ** 2. / a ** 2.) / 4.
kPoint = {'G': [ 0.00, 0.00, 0.00],
          'M': [-0.50, 0.50, 0.50],
          'N': [ 0.00, 0.50, 0.00],
          'P': [ 0.25, 0.25, 0.25],
          'X': [ 0.00, 0.00, 0.50],
          'Z': [  eta,  eta, -eta],
          'Z1': [-eta, 1.0 - eta, eta]}
#BCT2, tI
eta = (1. + a ** 2. / c ** 2.) / 4.
zeta = a ** 2. / (2. * c ** 2.)
kPoint = {'G': [0.00, 0.00, 0.00],
          'N': [0.00, 0.50, 0.00],
          'P': [0.25, 0.25, 0.25],
          'S': [-eta, eta, eta],
          'S1': [eta, 1.0 - eta, -eta],
          'X': [0.00, 0.00, 0.50],
          'Y': [-zeta, zeta, 0.50],
          'Y1': [0.50, 0.50, -zeta],
          'Z': [0.50, 0.50, -0.50]}
#ORC, oP
kPoint = {'G': [0.0, 0.0, 0.0],
          'R': [0.5, 0.5, 0.5],
          'S': [0.5, 0.5, 0.0],
          'T': [0.0, 0.5, 0.5],
          'U': [0.5, 0.0, 0.5],
          'X': [0.5, 0.0, 0.0],
          'Y': [0.0, 0.5, 0.0],
          'Z': [0.0, 0.0, 0.5]}
#ORCF1/3, oF
zeta = (1. + a ** 2. / b ** 2. - a ** 2. / c ** 2.) / 4.
eta = (1. + a ** 2. / b ** 2. + a ** 2. / c ** 2.) / 4.
kPoint = {'G': [0.0, 0.0, 0.0],
          'A': [0.5, 0.5 + zeta, zeta],
          'A1': [0.5, 0.5 - zeta, 1. - zeta],
          'L': [0.5, 0.5, 0.5],
          'T': [1.0, 0.5, 0.5],
          'X': [0.0, eta, eta],
          'X1': [1.0, 1.0 - eta, 1.0 - eta],
          'Y': [0.5, 0.0, 0.5],
          'Z': [0.5, 0.5, 0.0]}
#ORCF2, oF
eta = (1. + a ** 2. / b ** 2. - a ** 2. / c ** 2.) / 4.
delta = (1. + b ** 2. / a ** 2. - b ** 2. / c ** 2.) / 4.
phi = (1. + c ** 2. / b ** 2. - c ** 2. / a ** 2.) / 4.
kPoint = {'G': [0.0, 0.0, 0.0],
          'C': [0.5, 0.5 - eta, 1.0 - eta],
          'C1': [0.5, 0.5 + eta, eta],
          'D': [0.5 - delta, 0.5, 1.0 - delta],
          'D1': [0.5 + delta, 0.5, delta],
          'L': [0.5, 0.5, 0.5],
          'H': [1.0 - phi, 0.5 - phi, 0.5],
          'H1': [phi, 0.5 + phi, 0.5],
          'X': [0.0, 0.5, 0.5],
          'Y': [0.5, 0.0, 0.5],
          'Z': [0.5, 0.5, 0.0]}
#ORCI, oI
zeta = (1. + a ** 2. / c ** 2.) / 4.
delta = (b ** 2. - a ** 2.) / (4. * c ** 2.)
eta = (1. + b ** 2. / c ** 2.) / 4.
mu = (a ** 2. + b ** 2.) / (4. * c ** 2.)
kPoint = {'G': [0.0, 0.0, 0.0],
          'L': [-mu, mu, 0.5 - delta],
          'L1': [mu, -mu, 0.5 + delta],
          'L2': [0.5 - delta, 0.5 + delta, -mu],
          'R': [0.0, 0.5, 0.0],
          'S': [0.5, 0.0, 0.0],
          'T': [0.0, 0.0, 0.5],
          'W': [0.25, 0.25, 0.25],
          'X': [-zeta, zeta, zeta],
          'X1': [zeta, 1.0 - zeta, -zeta],
          'Y': [eta, -eta, eta],
          'Y1': [1.0 - eta, eta, -eta],
          'Z': [0.5, 0.5, -0.5]}
# ORCC, oS
zeta = (1. + a ** 2. / b ** 2.) / 4.
kPoint = {'G': [0.0, 0.0, 0.0],
          'A': [zeta, zeta, 0.5],
          'A1': [-zeta, 1.0 - zeta, 0.5],
          'R': [0.0, 0.5, 0.5],
          'S': [0.0, 0.5, 0.0],
          'T': [-0.5, 0.5, 0.5],
          'X': [zeta, zeta, 0.],
          'X1': [-zeta, 1.0 - zeta, 0.0],
          'Y': [-0.5, 0.5, 0.0],
          'Z': [0.0, 0.0, 0.5]}
# HEX, hP
kPoint = {'G': [0.0, 0.0, 0.0],
          'A': [0.0, 0.0, 0.5],
          'H': [1. / 3., 1. / 3., 0.5],
          'K': [1. / 3., 1. / 3., 0.0],
          'L': [0.5, 0.0, 0.5],
          'M': [0.5, 0.0, 0.0]}
# RHL1, hR
eta = (1. + 4. * np.cos(alpha)) / (2. + 4 * np.cos(alpha))
nu = 3. / 4. - eta / 2.
kPoint = {'G': [0.0, 0.0, 0.0],
          'B': [eta, 0.5, 1.0 - eta],
          'B1': [0.5, 1.0 - eta, eta - 1.0],
          'F': [0.5, 0.5, 0.0],
          'L': [0.5, 0.0, 0.0],
          'L1': [0.0, 0.0, -0.5],
          'P': [etc, nu, nu],
          'P1': [1.0 - nu, 1.0 - nu, 1.0 - eta],
          'P2': [nu, nu, eta - 1.0],
          'Q': [1.0 - nu, nu, 0.0],
          'X': [nu, 0.0, -nu],
          'Z': [0.5, 0.5, 0.5]}
# RHL2, hR
eta = 1. / (2. * np.tan(alpha / 2.) ** 2.)
nu = 3. / 4. - eta / 2.
kPoint = {'G': [0.0, 0.0, 0.0],
          'F': [0.5, -0.5, 0.0],
          'L': [0.5, 0.0, 0.0],
          'P': [1.0 - nu, -nu, 1.0 - nu],
          'P1': [nu, nu - 1.0, nu - 1.0],
          'Q': [eta, eta, eta],
          'Q1': [1.0 - eta, -eta, -eta],
          'Z': [0.5, -0.5, 0.5]}
# MCL, mP
eta = (1. - b * np.cos(alpha) / c) / (2. * np.sin(alpha) ** 2.)
nu = 0.5 - eta * c * np.cos(alpha) / b
kPoint = {'G': [0.0, 0.0, 0.0],
          'A': [0.5, 0.5, 0.0],
          'C': [0.0, 0.5, 0.5],
          'D': [0.5, 0.0, 0.5],
          'D1': [0.5, 0.0, -0.5],
          'E': [0.5, 0.5, 0.5],
          'H': [0.0, eta, 1.0 - nu],
          'H1': [0.0, 1.0 - eta, nu],
          'H2': [0.0, eta, -nu],
          'M': [0.5, eta, 1.0 - nu],
          'M1': [0.5, 1.0 - eta, nu],
          'M2': [0.5, eta, -nu],
          'X': [0.0, 0.5, 0.0],
          'Y': [0.0, 0.0, 0.5],
          'Y1': [0.0, 0.0, -0.5],
          'Z': [0.5, 0.0, 0.0]}
# MCLC1/2, mS
zeta = (2. - b * np.cos(alpha) / c) / (2. * np.sin(alpha)) ** 2.
eta = 0.5 + 2. * zeta * c * np.cos(alpha) / b
psi = 3. / 4. - [a / (2. * b * np.sin(alpha))] ** 2.
phi = psi + (3. / 4. - psi) * b * np.cos(alpha) / c
kPoint = {'G': [0.0, 0.0, 0.0],
          'N': [0.5, 0.0, 0.0],
          'N1': [0.0, -0.5, 0.0],
          'F': [1.0 - zeta, 1.0 - zeta, 1.0 - eta],
          'F1': [zeta, zeta, eta],
          'F2': [-zeta, -zeta, 1.0 - eta],
          'F3': [1.0 - zeta, -zeta, 1.0 - eta],
          'I': [phi, 1.0 - phi, 0.5],
          'I1': [1.0 - phi, phi - 1.0, 0.5],
          'L': [0.5, 0.5, 0.5],
          'M': [0.5, 0.0, 0.5],
          'X': [1.0 - psi, psi - 1.0, 0.0],
          'X1': [psi, 1.0 - psi, 0.0],
          'X2': [psi - 1.0, -psi, 0.0],
          'Y': [0.5, 0.5, 0.0],
          'Z': [0.0, 0.0, 0.5]}
# MCLC3/4, mS
mu = (1. + b ** 2. / a ** 2.) / 4.
delta = b * c * np.cos(alpha) / (2. * a ** 2.)
zeta = mu - 1. / 4. + (1. - b * np.cos(alpha) / c) / (2. * np.sin(alpha)) ** 2.
eta = 1. / 2. + 2. * zeta * np.cos(alpha) / b
phi = 1. + zeta - 2. * mu
psi = eta - 2. * delta
kPoint = {'G': [0.0, 0.0, 0.0],
          'F': [1.0 - phi, 1.0 - phi, 1.0 - psi],
          'F1': [phi, phi - 1.0, psi],
          'F2': [1.0 - phi, -phi, 1.0 - psi],
          'H': [zeta, zeta, eta],
          'H1': [1.0 - zeta, -zeta, 1.0 - eta],
          'H2': [-zeta, -zeta, 1.0 - eta],
          'I': [0.5, -0.5, 0.5],
          'M': [0.5, 0.0, 0.5],
          'N': [0.5, 0.0, 0.0],
          'N1': [0.0, -0.5, 0.0],
          'X': [0.5, -0.5, 0.0],
          'Y': [mu, mu, delta],
          'Y1': [1.0 - mu, -mu, -delta],
          'Y2': [-mu, -mu, -delta],
          'Y3': [mu, mu - 1.0, delta],
          'Z': [0.0, 0.0, 0.5]}
# MCLC5, mS
zeta = (b ** 2. / a ** 2. + (1. - b * np.cos(alpha) / c) / np.sin(alpha) ** 2.) / 4.
eta = 1. / 2. + 2. * zeta * c * np.cos(alpha) / b
mu = eta / 2. + b * c * np.cos(alpha) / (2. * a ** 2.)
nu = 2. * mu - zeta
omega = (4. * nu - 1. - (b * np.sin(alpha) / a) ** 2.) * c / (2. * b * np.cos(alpha))
delta = zeta * c * np.cos(alpha) / b + omega / 2. - 1. / 4.
rho = 1. - zeta * a ** 2. / b ** 2.
kPoint = {'G': [0.0, 0.0, 0.0],
          'F': [nu, nu, omega],
          'F1': [1.0 - nu, 1.0 - nu, 1.0 - omega],
          'F2': [nu, nu - 1.0, omega],
          'H': [zeta, zeta, eta],
          'H1': [1.0 - zeta, -zeta, 1.0 - eta],
          'H2': [-zeta, -zeta, 1.0 - eta],
          'I': [rho, 1.0 - rho, 0.5],
          'I1': [1.0 - rho, rho - 1.0, 0.5],
          'L': [0.5, 0.5, 0.5],
          'M': [0.5, 0.0, 0.5],
          'N': [0.5, 0.0, 0.0],
          'N1': [0.0, -0.5, 0.0],
          'X': [0.5, -0.5, 0.0],
          'Y': [mu, mu, delta],
          'Y1': [1.0 - mu, -mu, -delta],
          'Y2': [-mu, -mu, -delta],
          'Y3': [mu, mu - 1.0, delta],
          'Z': [0.0, 0.0, 0.5]}
# TRI1a/2a, aP
kPoint = {'G': [0.0, 0.0, 0.0],
          'L': [0.5, 0.5, 0.0],
          'M': [0.0, 0.5, 0.5],
          'N': [0.5, 0.0, 0.5],
          'R': [0.5, 0.5, 0.5],
          'X': [0.5, 0.0, 0.0],
          'Y': [0.0, 0.5, 0.0],
          'Z': [0.0, 0.0, 0.5]}
# TRI1b/2b, aP
kPoint = {'G': [ 0.0,  0.0, 0.0],
          'L': [ 0.5, -0.5, 0.0],
          'M': [ 0.0,  0.5, 0.5],
          'N': [-0.5, -0.5, 0.5],
          'R': [ 0.0, -0.5, 0.5],
          'X': [ 0.0, -0.5, 0.0],
          'Y': [ 0.5,  0.0, 0.0],
          'Z': [-0.5,  0.0, 0.5]}